/*
 * This file is generated by jOOQ.
 */
package com.github.jschlicht.multitenantdbbenchmark.model.jooq.tables;


import com.github.jschlicht.multitenantdbbenchmark.model.jooq.Keys;
import com.github.jschlicht.multitenantdbbenchmark.model.jooq.Public;
import com.github.jschlicht.multitenantdbbenchmark.model.jooq.tables.records.ShopsRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Shops extends TableImpl<ShopsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.shops</code>
     */
    public static final Shops SHOPS = new Shops();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopsRecord> getRecordType() {
        return ShopsRecord.class;
    }

    /**
     * The column <code>public.shops.id</code>.
     */
    public final TableField<ShopsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.shops.address1</code>.
     */
    public final TableField<ShopsRecord, String> ADDRESS1 = createField(DSL.name("address1"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.address2</code>.
     */
    public final TableField<ShopsRecord, String> ADDRESS2 = createField(DSL.name("address2"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.shops.city</code>.
     */
    public final TableField<ShopsRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.country_code</code>.
     */
    public final TableField<ShopsRecord, String> COUNTRY_CODE = createField(DSL.name("country_code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.created_at</code>.
     */
    public final TableField<ShopsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.shops.customer_email</code>.
     */
    public final TableField<ShopsRecord, String> CUSTOMER_EMAIL = createField(DSL.name("customer_email"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.currency</code>.
     */
    public final TableField<ShopsRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.domain</code>.
     */
    public final TableField<ShopsRecord, String> DOMAIN = createField(DSL.name("domain"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.email</code>.
     */
    public final TableField<ShopsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.name</code>.
     */
    public final TableField<ShopsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.phone</code>.
     */
    public final TableField<ShopsRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.shops.province</code>.
     */
    public final TableField<ShopsRecord, String> PROVINCE = createField(DSL.name("province"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.shop_owner</code>.
     */
    public final TableField<ShopsRecord, String> SHOP_OWNER = createField(DSL.name("shop_owner"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.timezone</code>.
     */
    public final TableField<ShopsRecord, String> TIMEZONE = createField(DSL.name("timezone"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.shops.updated_at</code>.
     */
    public final TableField<ShopsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.shops.zip</code>.
     */
    public final TableField<ShopsRecord, String> ZIP = createField(DSL.name("zip"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Shops(Name alias, Table<ShopsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Shops(Name alias, Table<ShopsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.shops</code> table reference
     */
    public Shops(String alias) {
        this(DSL.name(alias), SHOPS);
    }

    /**
     * Create an aliased <code>public.shops</code> table reference
     */
    public Shops(Name alias) {
        this(alias, SHOPS);
    }

    /**
     * Create a <code>public.shops</code> table reference
     */
    public Shops() {
        this(DSL.name("shops"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ShopsRecord, Long> getIdentity() {
        return (Identity<ShopsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShopsRecord> getPrimaryKey() {
        return Keys.SHOPS_PKEY;
    }

    @Override
    public Shops as(String alias) {
        return new Shops(DSL.name(alias), this);
    }

    @Override
    public Shops as(Name alias) {
        return new Shops(alias, this);
    }

    @Override
    public Shops as(Table<?> alias) {
        return new Shops(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shops rename(String name) {
        return new Shops(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shops rename(Name name) {
        return new Shops(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shops rename(Table<?> name) {
        return new Shops(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops where(Condition condition) {
        return new Shops(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shops where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shops where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shops where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shops where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shops whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
